package com.example.anonymous.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.demo.mylistview.PointBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "POINT_BEAN".
*/
public class PointBeanDao extends AbstractDao<PointBean, Long> {

    public static final String TABLENAME = "POINT_BEAN";

    /**
     * Properties of entity PointBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Map_id = new Property(1, int.class, "map_id", false, "MAP_ID");
        public final static Property PointName = new Property(2, String.class, "pointName", false, "POINT_NAME");
        public final static Property Position_x = new Property(3, float.class, "position_x", false, "POSITION_X");
        public final static Property Position_y = new Property(4, float.class, "position_y", false, "POSITION_Y");
        public final static Property Position_z = new Property(5, float.class, "position_z", false, "POSITION_Z");
        public final static Property Position = new Property(6, int.class, "position", false, "POSITION");
    };


    public PointBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PointBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POINT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MAP_ID\" INTEGER NOT NULL ," + // 1: map_id
                "\"POINT_NAME\" TEXT," + // 2: pointName
                "\"POSITION_X\" REAL NOT NULL ," + // 3: position_x
                "\"POSITION_Y\" REAL NOT NULL ," + // 4: position_y
                "\"POSITION_Z\" REAL NOT NULL ," + // 5: position_z
                "\"POSITION\" INTEGER NOT NULL );"); // 6: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POINT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PointBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMap_id());
 
        String pointName = entity.getPointName();
        if (pointName != null) {
            stmt.bindString(3, pointName);
        }
        stmt.bindDouble(4, entity.getPosition_x());
        stmt.bindDouble(5, entity.getPosition_y());
        stmt.bindDouble(6, entity.getPosition_z());
        stmt.bindLong(7, entity.getPosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PointBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMap_id());
 
        String pointName = entity.getPointName();
        if (pointName != null) {
            stmt.bindString(3, pointName);
        }
        stmt.bindDouble(4, entity.getPosition_x());
        stmt.bindDouble(5, entity.getPosition_y());
        stmt.bindDouble(6, entity.getPosition_z());
        stmt.bindLong(7, entity.getPosition());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PointBean readEntity(Cursor cursor, int offset) {
        PointBean entity = new PointBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // map_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pointName
            cursor.getFloat(offset + 3), // position_x
            cursor.getFloat(offset + 4), // position_y
            cursor.getFloat(offset + 5), // position_z
            cursor.getInt(offset + 6) // position
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PointBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMap_id(cursor.getInt(offset + 1));
        entity.setPointName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPosition_x(cursor.getFloat(offset + 3));
        entity.setPosition_y(cursor.getFloat(offset + 4));
        entity.setPosition_z(cursor.getFloat(offset + 5));
        entity.setPosition(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PointBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PointBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
