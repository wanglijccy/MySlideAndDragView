package com.example.anonymous.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.demo.mylistview.DescriptionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DESCRIPTION_BEAN".
*/
public class DescriptionBeanDao extends AbstractDao<DescriptionBean, Long> {

    public static final String TABLENAME = "DESCRIPTION_BEAN";

    /**
     * Properties of entity DescriptionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Position = new Property(1, int.class, "position", false, "POSITION");
        public final static Property Map_id = new Property(2, int.class, "map_id", false, "MAP_ID");
        public final static Property Point_id = new Property(3, Long.class, "point_id", false, "POINT_ID");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
    };


    public DescriptionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DescriptionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DESCRIPTION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"POSITION\" INTEGER NOT NULL ," + // 1: position
                "\"MAP_ID\" INTEGER NOT NULL ," + // 2: map_id
                "\"POINT_ID\" INTEGER," + // 3: point_id
                "\"DESCRIPTION\" TEXT);"); // 4: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DESCRIPTION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DescriptionBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPosition());
        stmt.bindLong(3, entity.getMap_id());
 
        Long point_id = entity.getPoint_id();
        if (point_id != null) {
            stmt.bindLong(4, point_id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DescriptionBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPosition());
        stmt.bindLong(3, entity.getMap_id());
 
        Long point_id = entity.getPoint_id();
        if (point_id != null) {
            stmt.bindLong(4, point_id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DescriptionBean readEntity(Cursor cursor, int offset) {
        DescriptionBean entity = new DescriptionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // position
            cursor.getInt(offset + 2), // map_id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // point_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DescriptionBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPosition(cursor.getInt(offset + 1));
        entity.setMap_id(cursor.getInt(offset + 2));
        entity.setPoint_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DescriptionBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DescriptionBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
